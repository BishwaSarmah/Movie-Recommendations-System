# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1w7Tef4sqtXi3lFymZc83x9vgDZt4L6Rd

Imports libraries
"""

import numpy as np
import pandas as pd
import difflib #most closest match
from sklearn.feature_extraction.text import TfidfVectorizer #convert texture data numerical values
from sklearn.metrics.pairwise import cosine_similarity #find similarities or to give similarities score

"""Data Collection and Processing"""

# Loading the data from CSV file

movies_data = pd.read_csv('/content/movies.csv')

# Print the first 5 rows of the data
movies_data.head()

# Numbers of rows and columns in the data

movies_data.shape

# selecting the relavant feature for recommendation

selected_feature = ['genres', 'keywords', 'popularity', 'cast', 'director']
print(selected_feature)

# replacing null values with null string

for feature in selected_feature:
  movies_data[feature] = movies_data[feature].fillna('')

# combining all the 5 selected feature

combined_features = movies_data['genres']+' '+movies_data['keywords']+' '+movies_data['popularity'].astype(str)+' '+movies_data['cast']+' '+movies_data['director']

print(combined_features)

# converting the text data to feature vectors

vectorize = TfidfVectorizer()

feature_vectors = vectorize.fit_transform(combined_features)

print(feature_vectors)

"""Cosine Similarity"""

# getting the similarity score

similarity = cosine_similarity(feature_vectors)

print(similarity)

print(similarity.shape)

# getting the movie name from the user

movie_name = input(' Enter your favourite movie name : ')

# Creating a list with all the movies names given in the dataset

list_of_all_titles = movies_data['title'].tolist()
print(list_of_all_titles)

#finding the close match for the movie name given by the user

find_close_match = difflib.get_close_matches(movie_name, list_of_all_titles)
print(find_close_match)

close_match = find_close_match[0]
print(close_match)

# finding the index of the movie with title

index_of_the_movie = movies_data[movies_data.title == close_match]['index'].values[0]
print(index_of_the_movie)

# getting a list of similar movies

similarity_score = list(enumerate(similarity[index_of_the_movie])) #carry out index in a loop: enumerate

print(similarity_score)

len(similarity_score)

# sorting the movies based on their similarity score

sorted_simlar_movies = sorted(similarity_score, key = lambda x:x[1], reverse = True)

print(sorted_simlar_movies)

# print the name of similar movies based on the index

print('Movies suggested for you: \n')

i = 1

for movie in sorted_simlar_movies:
  index = movie[0]
  title_from_index = movies_data[movies_data.index==index]['title'].values[0]
  if(i<10):
    print(i, '.',title_from_index)
    i+=1

"""Movie recommendation system"""

movie_name = input(' Enter your favourite movie name : ')

list_of_all_titles = movies_data['title'].tolist()

find_close_match = difflib.get_close_matches(movie_name, list_of_all_titles)

close_match = find_close_match[0]

index_of_the_movie = movies_data[movies_data.title == close_match]['index'].values[0]

similarity_score = list(enumerate(similarity[index_of_the_movie]))

sorted_simlar_movies = sorted(similarity_score, key = lambda x:x[1], reverse = True)

print('Movies suggested for you: \n')

i = 1

for movie in sorted_simlar_movies:
  index = movie[0]
  title_from_index = movies_data[movies_data.index==index]['title'].values[0]
  if(i<10):
    print(i, '.',title_from_index)
    i+=1